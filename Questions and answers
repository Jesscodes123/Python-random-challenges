Challenge : Palindrome Permutation
Write a function to determine if a string can be rearranged into a palindrome. A palindrome is a word or phrase that is the same forwards and backwards.

solution: def can_permute_palindrome(s):
    char_count = {}
    for char in s:
        char_count[char] = char_count.get(char, 0) + 1
    
    odd_count = 0
    for count in char_count.values():
        if count % 2 != 0:
            odd_count += 1
            if odd_count > 1:
                return False
    
    return True

# Test the function
print(can_permute_palindrome("tactcoa"))  # Output: True


Challenge : Maximum Subarray
Given an integer array, find the contiguous subarray (containing at least one number) that has the largest sum and return its sum.

Solution: def max_subarray_sum(nums):
    max_sum = float('-inf')
    current_sum = 0
    
    for num in nums:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    
    return max_sum

# Test the function
print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))  # Output: 6


Challenge : Word Ladder
Given two words (beginWord and endWord), and a dictionary's word list, find the length of the shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list.



Solution: from collections import deque

def ladder_length(beginWord, endWord, wordList):
    wordSet = set(wordList)
    queue = deque([(beginWord, 1)])
    visited = set()

    while queue:
        word, length = queue.popleft()
        if word == endWord:
            return length
        for i in range(len(word)):
            for char in 'abcdefghijklmnopqrstuvwxyz':
                new_word = word[:i] + char + word[i + 1:]
                if new_word in wordSet and new_word not in visited:
                    visited.add(new_word)
                    queue.append((new_word, length + 1))
    return 0

# Test the function
beginWord = "hit"
endWord = "cog"
wordList = ["hot", "dot", "dog", "lot", "log", "cog"]
print(ladder_length(beginWord, endWord, wordList))  # Output: 5
